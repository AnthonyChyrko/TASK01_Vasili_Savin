<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="EPBYMINW2705" ignored="0" name="AutoQA" tests="168" failures="9" timestamp="26 Jun 2017 09:41:33 GMT" time="1.535" errors="0">
  <testcase name="checkIllegalArgExpLargerMAXValue" time="0.014" classname="tests.task0101.Tst0101Statement"/>
  <testcase name="checkIllegalArgExpLargerMAXValue" time="0.001" classname="tests.task0101.Tst0101Statement"/>
  <testcase name="checkIllegalArgExpLessMINValue" time="0.001" classname="tests.task0101.Tst0101Statement"/>
  <testcase name="checkIllegalArgExpLessMINValue" time="0.001" classname="tests.task0101.Tst0101Statement"/>
  <testcase name="checkMethIsStatementCorrectValidValuesFalse" time="0.003" classname="tests.task0101.Tst0101Statement"/>
  <testcase name="checkMethIsStatementCorrectValidValuesFalse" time="0.001" classname="tests.task0101.Tst0101Statement"/>
  <testcase name="checkMethIsStatementCorrectValidValuesFalse" time="0.001" classname="tests.task0101.Tst0101Statement"/>
  <testcase name="checkMethIsStatementCorrectValidValuesTrue" time="0.001" classname="tests.task0101.Tst0101Statement"/>
  <testcase name="checkMethIsStatementCorrectValidValuesTrue" time="0.001" classname="tests.task0101.Tst0101Statement"/>
  <testcase name="checkMethIsStatementCorrectValidValuesTrue" time="0.001" classname="tests.task0101.Tst0101Statement"/>
  <testcase name="checkNOillegalArgExpValidValues" time="0.001" classname="tests.task0101.Tst0101Statement"/>
  <testcase name="checkNOillegalArgExpValidValues" time="0.001" classname="tests.task0101.Tst0101Statement"/>
  <testcase name="checkNOillegalArgExpValidValues" time="0.001" classname="tests.task0101.Tst0101Statement"/>
  <testcase name="checkResolveCatchArithmeticExpIncorrectValues" time="0.075" classname="tests.task0102.Tst0201ExpressionResolve"/>
  <testcase name="checkResolveCatchArithmeticExpIncorrectValues" time="0.012" classname="tests.task0102.Tst0201ExpressionResolve"/>
  <testcase name="checkResolveCatchArithmeticExpIncorrectValues" time="0.001" classname="tests.task0102.Tst0201ExpressionResolve"/>
  <testcase name="checkResolveCatchArithmeticExpIncorrectValues" time="0.001" classname="tests.task0102.Tst0201ExpressionResolve">
    <failure type="org.testng.TestException" message="
Method Tst0201ExpressionResolve.checkResolveCatchArithmeticExpIncorrectValues(double, double, double)[pri:0, instance:tests.task0102.Tst0201ExpressionResolve@6a2bcfcb] should have thrown an exception of type class java.lang.ArithmeticException">
      <![CDATA[org.testng.TestException: 
Method Tst0201ExpressionResolve.checkResolveCatchArithmeticExpIncorrectValues(double, double, double)[pri:0, instance:tests.task0102.Tst0201ExpressionResolve@6a2bcfcb] should have thrown an exception of type class java.lang.ArithmeticException
... Removed 22 stack frames]]>
    </failure>
  </testcase> <!-- checkResolveCatchArithmeticExpIncorrectValues -->
  <testcase name="checkResolveCatchIllegalArgExpIncorrectValues" time="0.005" classname="tests.task0102.Tst0201ExpressionResolve"/>
  <testcase name="checkResolveCatchIllegalArgExpIncorrectValues" time="0.001" classname="tests.task0102.Tst0201ExpressionResolve"/>
  <testcase name="checkResolveCatchIllegalArgExpIncorrectValues" time="0.004" classname="tests.task0102.Tst0201ExpressionResolve"/>
  <testcase name="checkResolveCatchIllegalArgExpIncorrectValues" time="0.003" classname="tests.task0102.Tst0201ExpressionResolve">
    <failure type="org.testng.TestException" message="
Method Tst0201ExpressionResolve.checkResolveCatchIllegalArgExpIncorrectValues(double, double, double)[pri:0, instance:tests.task0102.Tst0201ExpressionResolve@6a2bcfcb] should have thrown an exception of type class java.lang.IllegalArgumentException">
      <![CDATA[org.testng.TestException: 
Method Tst0201ExpressionResolve.checkResolveCatchIllegalArgExpIncorrectValues(double, double, double)[pri:0, instance:tests.task0102.Tst0201ExpressionResolve@6a2bcfcb] should have thrown an exception of type class java.lang.IllegalArgumentException
... Removed 22 stack frames]]>
    </failure>
  </testcase> <!-- checkResolveCatchIllegalArgExpIncorrectValues -->
  <testcase name="checkResolveNOCatchArithmeticExpValidValues" time="0.002" classname="tests.task0102.Tst0201ExpressionResolve"/>
  <testcase name="checkResolveNOCatchArithmeticExpValidValues" time="0.003" classname="tests.task0102.Tst0201ExpressionResolve"/>
  <testcase name="checkResolveNOCatchArithmeticExpValidValues" time="0.005" classname="tests.task0102.Tst0201ExpressionResolve"/>
  <testcase name="checkResolveNOCatchIllegalArgExpValidValues" time="0.003" classname="tests.task0102.Tst0201ExpressionResolve"/>
  <testcase name="checkResolveNOCatchIllegalArgExpValidValues" time="0.002" classname="tests.task0102.Tst0201ExpressionResolve"/>
  <testcase name="checkResolveNOCatchIllegalArgExpValidValues" time="0.003" classname="tests.task0102.Tst0201ExpressionResolve"/>
  <testcase name="checkResolveNOCatchIllegalArgExpValidValues" time="0.002" classname="tests.task0102.Tst0201ExpressionResolve"/>
  <testcase name="checkResolveValidValue" time="0.002" classname="tests.task0102.Tst0201ExpressionResolve"/>
  <testcase name="checkResolveValidValue" time="0.001" classname="tests.task0102.Tst0201ExpressionResolve"/>
  <testcase name="checkResolveValidValue" time="0.001" classname="tests.task0102.Tst0201ExpressionResolve"/>
  <testcase name="getAreaValidValue" time="0.018" classname="tests.task0103.Tst0301Triangle">
    <failure type="java.lang.AssertionError" message="expected [0.5] but found [1.0]">
      <![CDATA[java.lang.AssertionError: expected [0.5] but found [1.0]
	at tests.task0103.Tst0301Triangle.getAreaValidValue(Tst0301Triangle.java:38)
... Removed 30 stack frames]]>
    </failure>
  </testcase> <!-- getAreaValidValue -->
  <testcase name="getAreaValidValue" time="0.003" classname="tests.task0103.Tst0301Triangle"/>
  <testcase name="getAreaValidValue" time="0.002" classname="tests.task0103.Tst0301Triangle">
    <failure type="java.lang.AssertionError" message="expected [6.0] but found [3.5]">
      <![CDATA[java.lang.AssertionError: expected [6.0] but found [3.5]
	at tests.task0103.Tst0301Triangle.getAreaValidValue(Tst0301Triangle.java:38)
... Removed 30 stack frames]]>
    </failure>
  </testcase> <!-- getAreaValidValue -->
  <testcase name="getPerimeterValidValue" time="0.001" classname="tests.task0103.Tst0301Triangle"/>
  <testcase name="getPerimeterValidValue" time="0.003" classname="tests.task0103.Tst0301Triangle"/>
  <testcase name="getPerimeterValidValue" time="0.007" classname="tests.task0103.Tst0301Triangle"/>
  <testcase name="getPerimeterValidValue" time="0.003" classname="tests.task0103.Tst0301Triangle"/>
  <testcase name="triangleIllegalArgExpIncorrectValue" time="0.002" classname="tests.task0103.Tst0301Triangle"/>
  <testcase name="triangleIllegalArgExpIncorrectValue" time="0.001" classname="tests.task0103.Tst0301Triangle"/>
  <testcase name="triangleIllegalArgExpIncorrectValue" time="0.003" classname="tests.task0103.Tst0301Triangle"/>
  <testcase name="triangleIllegalArgExpIncorrectValue" time="0.002" classname="tests.task0103.Tst0301Triangle"/>
  <testcase name="triangleIllegalArgExpIncorrectValue" time="0.003" classname="tests.task0103.Tst0301Triangle"/>
  <testcase name="triangleIllegalArgExpIncorrectValue" time="0.001" classname="tests.task0103.Tst0301Triangle"/>
  <testcase name="triangleIllegalArgExpIncorrectValue" time="0.003" classname="tests.task0103.Tst0301Triangle"/>
  <testcase name="triangleIllegalArgExpIncorrectValue" time="0.003" classname="tests.task0103.Tst0301Triangle"/>
  <testcase name="triangleIllegalArgExpIncorrectValue" time="0.005" classname="tests.task0103.Tst0301Triangle"/>
  <testcase name="triangleIllegalArgExpValidValue" time="0.008" classname="tests.task0103.Tst0301Triangle"/>
  <testcase name="triangleIllegalArgExpValidValue" time="0.002" classname="tests.task0103.Tst0301Triangle"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.021" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.005" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.005" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.003" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesInArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.002" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.002" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.002" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.002" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.003" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.002" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.002" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.0" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.002" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.002" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.002" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.002" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="isPointInArea_ValidValuesOutOfArea" time="0.001" classname="tests.task0104.Tst0401IsPointInArea"/>
  <testcase name="pow_ValidValues" time="0.061" classname="tests.task0105.Tst0501Pow"/>
  <testcase name="pow_ValidValues" time="0.001" classname="tests.task0105.Tst0501Pow"/>
  <testcase name="pow_ValidValues" time="0.002" classname="tests.task0105.Tst0501Pow"/>
  <testcase name="pow_ValidValues" time="0.001" classname="tests.task0105.Tst0501Pow"/>
  <testcase name="pow_ValidValues" time="0.006" classname="tests.task0105.Tst0501Pow"/>
  <testcase name="pow_ValidValues" time="0.001" classname="tests.task0105.Tst0501Pow"/>
  <testcase name="pow_ValidValues" time="0.002" classname="tests.task0105.Tst0501Pow"/>
  <testcase name="pow_ValidValues" time="0.005" classname="tests.task0105.Tst0501Pow"/>
  <testcase name="maxValidValue" time="0.01" classname="tests.task0106.Tst0601SumMinAndMax"/>
  <testcase name="maxValidValue" time="0.001" classname="tests.task0106.Tst0601SumMinAndMax"/>
  <testcase name="maxValidValue" time="0.008" classname="tests.task0106.Tst0601SumMinAndMax"/>
  <testcase name="maxValidValue" time="0.001" classname="tests.task0106.Tst0601SumMinAndMax"/>
  <testcase name="minValidValue" time="0.001" classname="tests.task0106.Tst0601SumMinAndMax"/>
  <testcase name="minValidValue" time="0.0" classname="tests.task0106.Tst0601SumMinAndMax"/>
  <testcase name="minValidValue" time="0.0" classname="tests.task0106.Tst0601SumMinAndMax"/>
  <testcase name="minValidValue" time="0.0" classname="tests.task0106.Tst0601SumMinAndMax"/>
  <testcase name="summMinAndMaxValidValue" time="0.0" classname="tests.task0106.Tst0601SumMinAndMax"/>
  <testcase name="summMinAndMaxValidValue" time="0.059" classname="tests.task0106.Tst0601SumMinAndMax"/>
  <testcase name="summMinAndMaxValidValue" time="0.001" classname="tests.task0106.Tst0601SumMinAndMax"/>
  <testcase name="f" time="0.061" classname="tests.task0107.Tst0701Solve">
    <failure type="java.lang.AssertionError" message="expected [true] but found [false]">
      <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at tests.task0107.Tst0701Solve.f(Tst0701Solve.java:43)
... Removed 29 stack frames]]>
    </failure>
  </testcase> <!-- f -->
  <testcase name="arrayCorrectValues" time="0.003" classname="tests.task0108.Tst0801ArrayExceptionPos"/>
  <testcase name="arrayCorrectValues" time="0.001" classname="tests.task0108.Tst0801ArrayExceptionPos">
    <failure type="java.lang.OutOfMemoryError" message="Requested array size exceeds VM limit">
      <![CDATA[java.lang.OutOfMemoryError: Requested array size exceeds VM limit
	at main.java.com.epam.Task0108.Array.arrInit(Array.java:18)
	at main.java.com.epam.Task0108.Array.<init>(Array.java:10)
	at tests.task0108.Tst0801ArrayExceptionPos.arrayCorrectValues(Tst0801ArrayExceptionPos.java:27)
... Removed 25 stack frames]]>
    </failure>
  </testcase> <!-- arrayCorrectValues -->
  <testcase name="divisionByZero" time="0.002" classname="tests.task0108.Tst0801ArrayExceptionPos">
    <failure type="java.lang.ArithmeticException" message="/ by zero">
      <![CDATA[java.lang.ArithmeticException: / by zero
	at main.java.com.epam.Task0108.Array.sum(Array.java:33)
	at tests.task0108.Tst0801ArrayExceptionPos.divisionByZero(Tst0801ArrayExceptionPos.java:46)
... Removed 25 stack frames]]>
    </failure>
  </testcase> <!-- divisionByZero -->
  <testcase name="divisionByZeroCatchExp" time="0.002" classname="tests.task0108.Tst0801ArrayExceptionPos">
    <failure type="java.lang.AssertionError" message="expected [true] but found [false]">
      <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at tests.task0108.Tst0801ArrayExceptionPos.divisionByZeroCatchExp(Tst0801ArrayExceptionPos.java:71)
... Removed 29 stack frames]]>
    </failure>
  </testcase> <!-- divisionByZeroCatchExp -->
  <testcase name="illegalArgExpIncorrectValues" time="0.002" classname="tests.task0108.Tst0801ArrayExceptionPos"/>
  <testcase name="illegalArgExpIncorrectValues" time="0.002" classname="tests.task0108.Tst0801ArrayExceptionPos"/>
  <testcase name="positiveElementOfArray" time="0.002" classname="tests.task0108.Tst0801ArrayExceptionPos"/>
  <testcase name="summCorrectValues" time="0.001" classname="tests.task0108.Tst0801ArrayExceptionPos"/>
  <testcase name="summCorrectValues" time="0.0" classname="tests.task0108.Tst0801ArrayExceptionPos"/>
  <testcase name="catchingIllegalArgException" time="0.016" classname="tests.task0109.Tst0901GenerateArrayAndJoin"/>
  <testcase name="catchingIllegalArgException" time="0.0" classname="tests.task0109.Tst0901GenerateArrayAndJoin"/>
  <testcase name="catchingIllegalArgExceptionInsertPositionBiggerArrayLength" time="0.001" classname="tests.task0109.Tst0901GenerateArrayAndJoin"/>
  <testcase name="catchingIllegalArgExceptionInsertPositionBiggerArrayLength" time="0.0" classname="tests.task0109.Tst0901GenerateArrayAndJoin"/>
  <testcase name="catchingIllegalArgExceptionNegativeInsertPosition" time="0.001" classname="tests.task0109.Tst0901GenerateArrayAndJoin"/>
  <testcase name="checkJoinTwoArrays" time="0.0" classname="tests.task0109.Tst0901GenerateArrayAndJoin"/>
  <testcase name="checkJoinTwoArrays" time="0.001" classname="tests.task0109.Tst0901GenerateArrayAndJoin"/>
  <testcase name="checkJoinTwoArrays" time="0.001" classname="tests.task0109.Tst0901GenerateArrayAndJoin"/>
  <testcase name="checkJoinTwoArrays" time="0.0" classname="tests.task0109.Tst0901GenerateArrayAndJoin"/>
  <testcase name="checkLengthArrayPos" time="0.0" classname="tests.task0109.Tst0901GenerateArrayAndJoin"/>
  <testcase name="checkLengthArrayPos" time="0.0" classname="tests.task0109.Tst0901GenerateArrayAndJoin"/>
  <testcase name="catchingIllegalArgExceptionInegerMAXValue" time="0.009" classname="tests.task0110.Tst1001Generate">
    <failure type="java.lang.AssertionError" message="expected [true] but found [false]">
      <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at tests.task0110.Tst1001Generate.catchingIllegalArgExceptionInegerMAXValue(Tst1001Generate.java:33)
... Removed 29 stack frames]]>
    </failure>
  </testcase> <!-- catchingIllegalArgExceptionInegerMAXValue -->
  <testcase name="catchingIllegalArgExceptionNegativeValue" time="0.001" classname="tests.task0110.Tst1001Generate"/>
  <testcase name="checkReturnedArray" time="0.001" classname="tests.task0110.Tst1001Generate"/>
</testsuite> <!-- AutoQA -->
